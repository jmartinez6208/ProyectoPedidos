//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PresentacionEscritorio.wcfPedidos {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PedidoEntidades", Namespace="http://schemas.datacontract.org/2004/07/Entidades")]
    [System.SerializableAttribute()]
    public partial class PedidoEntidades : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EstadoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FechaCreacionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdClienteField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdRepartidorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double TotalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double TotalConseguidoField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Estado {
            get {
                return this.EstadoField;
            }
            set {
                if ((object.ReferenceEquals(this.EstadoField, value) != true)) {
                    this.EstadoField = value;
                    this.RaisePropertyChanged("Estado");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FechaCreacion {
            get {
                return this.FechaCreacionField;
            }
            set {
                if ((object.ReferenceEquals(this.FechaCreacionField, value) != true)) {
                    this.FechaCreacionField = value;
                    this.RaisePropertyChanged("FechaCreacion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdCliente {
            get {
                return this.IdClienteField;
            }
            set {
                if ((this.IdClienteField.Equals(value) != true)) {
                    this.IdClienteField = value;
                    this.RaisePropertyChanged("IdCliente");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdRepartidor {
            get {
                return this.IdRepartidorField;
            }
            set {
                if ((this.IdRepartidorField.Equals(value) != true)) {
                    this.IdRepartidorField = value;
                    this.RaisePropertyChanged("IdRepartidor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Total {
            get {
                return this.TotalField;
            }
            set {
                if ((this.TotalField.Equals(value) != true)) {
                    this.TotalField = value;
                    this.RaisePropertyChanged("Total");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double TotalConseguido {
            get {
                return this.TotalConseguidoField;
            }
            set {
                if ((this.TotalConseguidoField.Equals(value) != true)) {
                    this.TotalConseguidoField = value;
                    this.RaisePropertyChanged("TotalConseguido");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="wcfPedidos.IPedidoWCF")]
    public interface IPedidoWCF {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPedidoWCF/Nuevo", ReplyAction="http://tempuri.org/IPedidoWCF/NuevoResponse")]
        PresentacionEscritorio.wcfPedidos.PedidoEntidades Nuevo(PresentacionEscritorio.wcfPedidos.PedidoEntidades pedido);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPedidoWCF/Nuevo", ReplyAction="http://tempuri.org/IPedidoWCF/NuevoResponse")]
        System.Threading.Tasks.Task<PresentacionEscritorio.wcfPedidos.PedidoEntidades> NuevoAsync(PresentacionEscritorio.wcfPedidos.PedidoEntidades pedido);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPedidoWCF/Actualizar", ReplyAction="http://tempuri.org/IPedidoWCF/ActualizarResponse")]
        PresentacionEscritorio.wcfPedidos.PedidoEntidades Actualizar(PresentacionEscritorio.wcfPedidos.PedidoEntidades pedido);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPedidoWCF/Actualizar", ReplyAction="http://tempuri.org/IPedidoWCF/ActualizarResponse")]
        System.Threading.Tasks.Task<PresentacionEscritorio.wcfPedidos.PedidoEntidades> ActualizarAsync(PresentacionEscritorio.wcfPedidos.PedidoEntidades pedido);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPedidoWCF/DevolverPedidoPorId", ReplyAction="http://tempuri.org/IPedidoWCF/DevolverPedidoPorIdResponse")]
        PresentacionEscritorio.wcfPedidos.PedidoEntidades DevolverPedidoPorId(int identificador);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPedidoWCF/DevolverPedidoPorId", ReplyAction="http://tempuri.org/IPedidoWCF/DevolverPedidoPorIdResponse")]
        System.Threading.Tasks.Task<PresentacionEscritorio.wcfPedidos.PedidoEntidades> DevolverPedidoPorIdAsync(int identificador);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPedidoWCF/DevolverListaPedidos", ReplyAction="http://tempuri.org/IPedidoWCF/DevolverListaPedidosResponse")]
        PresentacionEscritorio.wcfPedidos.PedidoEntidades[] DevolverListaPedidos();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPedidoWCF/DevolverListaPedidos", ReplyAction="http://tempuri.org/IPedidoWCF/DevolverListaPedidosResponse")]
        System.Threading.Tasks.Task<PresentacionEscritorio.wcfPedidos.PedidoEntidades[]> DevolverListaPedidosAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPedidoWCF/DevolverListaPedidosEstadoPendiente", ReplyAction="http://tempuri.org/IPedidoWCF/DevolverListaPedidosEstadoPendienteResponse")]
        PresentacionEscritorio.wcfPedidos.PedidoEntidades[] DevolverListaPedidosEstadoPendiente();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPedidoWCF/DevolverListaPedidosEstadoPendiente", ReplyAction="http://tempuri.org/IPedidoWCF/DevolverListaPedidosEstadoPendienteResponse")]
        System.Threading.Tasks.Task<PresentacionEscritorio.wcfPedidos.PedidoEntidades[]> DevolverListaPedidosEstadoPendienteAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPedidoWCF/DevolverListaPedidosPorRepartidor", ReplyAction="http://tempuri.org/IPedidoWCF/DevolverListaPedidosPorRepartidorResponse")]
        PresentacionEscritorio.wcfPedidos.PedidoEntidades[] DevolverListaPedidosPorRepartidor(int idRepartidor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPedidoWCF/DevolverListaPedidosPorRepartidor", ReplyAction="http://tempuri.org/IPedidoWCF/DevolverListaPedidosPorRepartidorResponse")]
        System.Threading.Tasks.Task<PresentacionEscritorio.wcfPedidos.PedidoEntidades[]> DevolverListaPedidosPorRepartidorAsync(int idRepartidor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPedidoWCF/EliminarPedidoPorId", ReplyAction="http://tempuri.org/IPedidoWCF/EliminarPedidoPorIdResponse")]
        bool EliminarPedidoPorId(int identificador);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPedidoWCF/EliminarPedidoPorId", ReplyAction="http://tempuri.org/IPedidoWCF/EliminarPedidoPorIdResponse")]
        System.Threading.Tasks.Task<bool> EliminarPedidoPorIdAsync(int identificador);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPedidoWCF/DevolverListaPedidosPorCliente", ReplyAction="http://tempuri.org/IPedidoWCF/DevolverListaPedidosPorClienteResponse")]
        PresentacionEscritorio.wcfPedidos.PedidoEntidades[] DevolverListaPedidosPorCliente(int idCliente);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPedidoWCF/DevolverListaPedidosPorCliente", ReplyAction="http://tempuri.org/IPedidoWCF/DevolverListaPedidosPorClienteResponse")]
        System.Threading.Tasks.Task<PresentacionEscritorio.wcfPedidos.PedidoEntidades[]> DevolverListaPedidosPorClienteAsync(int idCliente);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPedidoWCF/ActualizarEstado", ReplyAction="http://tempuri.org/IPedidoWCF/ActualizarEstadoResponse")]
        bool ActualizarEstado(int idPedido, string estado);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPedidoWCF/ActualizarEstado", ReplyAction="http://tempuri.org/IPedidoWCF/ActualizarEstadoResponse")]
        System.Threading.Tasks.Task<bool> ActualizarEstadoAsync(int idPedido, string estado);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPedidoWCF/EliminarPedidosPorEstado", ReplyAction="http://tempuri.org/IPedidoWCF/EliminarPedidosPorEstadoResponse")]
        bool EliminarPedidosPorEstado();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPedidoWCF/EliminarPedidosPorEstado", ReplyAction="http://tempuri.org/IPedidoWCF/EliminarPedidosPorEstadoResponse")]
        System.Threading.Tasks.Task<bool> EliminarPedidosPorEstadoAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPedidoWCF/EliminarPedidosIncompletos", ReplyAction="http://tempuri.org/IPedidoWCF/EliminarPedidosIncompletosResponse")]
        bool EliminarPedidosIncompletos();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPedidoWCF/EliminarPedidosIncompletos", ReplyAction="http://tempuri.org/IPedidoWCF/EliminarPedidosIncompletosResponse")]
        System.Threading.Tasks.Task<bool> EliminarPedidosIncompletosAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPedidoWCF/AsignarRepartidor", ReplyAction="http://tempuri.org/IPedidoWCF/AsignarRepartidorResponse")]
        bool AsignarRepartidor(int idPedido, string estado, int idRepartidor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPedidoWCF/AsignarRepartidor", ReplyAction="http://tempuri.org/IPedidoWCF/AsignarRepartidorResponse")]
        System.Threading.Tasks.Task<bool> AsignarRepartidorAsync(int idPedido, string estado, int idRepartidor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPedidoWCF/actualizarTotalConseguido", ReplyAction="http://tempuri.org/IPedidoWCF/actualizarTotalConseguidoResponse")]
        bool actualizarTotalConseguido(int idPedido, double subtotal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPedidoWCF/actualizarTotalConseguido", ReplyAction="http://tempuri.org/IPedidoWCF/actualizarTotalConseguidoResponse")]
        System.Threading.Tasks.Task<bool> actualizarTotalConseguidoAsync(int idPedido, double subtotal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPedidoWCF/DevolverListaPedidosPorEstado", ReplyAction="http://tempuri.org/IPedidoWCF/DevolverListaPedidosPorEstadoResponse")]
        PresentacionEscritorio.wcfPedidos.PedidoEntidades[] DevolverListaPedidosPorEstado(string estado);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPedidoWCF/DevolverListaPedidosPorEstado", ReplyAction="http://tempuri.org/IPedidoWCF/DevolverListaPedidosPorEstadoResponse")]
        System.Threading.Tasks.Task<PresentacionEscritorio.wcfPedidos.PedidoEntidades[]> DevolverListaPedidosPorEstadoAsync(string estado);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPedidoWCFChannel : PresentacionEscritorio.wcfPedidos.IPedidoWCF, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PedidoWCFClient : System.ServiceModel.ClientBase<PresentacionEscritorio.wcfPedidos.IPedidoWCF>, PresentacionEscritorio.wcfPedidos.IPedidoWCF {
        
        public PedidoWCFClient() {
        }
        
        public PedidoWCFClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PedidoWCFClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PedidoWCFClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PedidoWCFClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public PresentacionEscritorio.wcfPedidos.PedidoEntidades Nuevo(PresentacionEscritorio.wcfPedidos.PedidoEntidades pedido) {
            return base.Channel.Nuevo(pedido);
        }
        
        public System.Threading.Tasks.Task<PresentacionEscritorio.wcfPedidos.PedidoEntidades> NuevoAsync(PresentacionEscritorio.wcfPedidos.PedidoEntidades pedido) {
            return base.Channel.NuevoAsync(pedido);
        }
        
        public PresentacionEscritorio.wcfPedidos.PedidoEntidades Actualizar(PresentacionEscritorio.wcfPedidos.PedidoEntidades pedido) {
            return base.Channel.Actualizar(pedido);
        }
        
        public System.Threading.Tasks.Task<PresentacionEscritorio.wcfPedidos.PedidoEntidades> ActualizarAsync(PresentacionEscritorio.wcfPedidos.PedidoEntidades pedido) {
            return base.Channel.ActualizarAsync(pedido);
        }
        
        public PresentacionEscritorio.wcfPedidos.PedidoEntidades DevolverPedidoPorId(int identificador) {
            return base.Channel.DevolverPedidoPorId(identificador);
        }
        
        public System.Threading.Tasks.Task<PresentacionEscritorio.wcfPedidos.PedidoEntidades> DevolverPedidoPorIdAsync(int identificador) {
            return base.Channel.DevolverPedidoPorIdAsync(identificador);
        }
        
        public PresentacionEscritorio.wcfPedidos.PedidoEntidades[] DevolverListaPedidos() {
            return base.Channel.DevolverListaPedidos();
        }
        
        public System.Threading.Tasks.Task<PresentacionEscritorio.wcfPedidos.PedidoEntidades[]> DevolverListaPedidosAsync() {
            return base.Channel.DevolverListaPedidosAsync();
        }
        
        public PresentacionEscritorio.wcfPedidos.PedidoEntidades[] DevolverListaPedidosEstadoPendiente() {
            return base.Channel.DevolverListaPedidosEstadoPendiente();
        }
        
        public System.Threading.Tasks.Task<PresentacionEscritorio.wcfPedidos.PedidoEntidades[]> DevolverListaPedidosEstadoPendienteAsync() {
            return base.Channel.DevolverListaPedidosEstadoPendienteAsync();
        }
        
        public PresentacionEscritorio.wcfPedidos.PedidoEntidades[] DevolverListaPedidosPorRepartidor(int idRepartidor) {
            return base.Channel.DevolverListaPedidosPorRepartidor(idRepartidor);
        }
        
        public System.Threading.Tasks.Task<PresentacionEscritorio.wcfPedidos.PedidoEntidades[]> DevolverListaPedidosPorRepartidorAsync(int idRepartidor) {
            return base.Channel.DevolverListaPedidosPorRepartidorAsync(idRepartidor);
        }
        
        public bool EliminarPedidoPorId(int identificador) {
            return base.Channel.EliminarPedidoPorId(identificador);
        }
        
        public System.Threading.Tasks.Task<bool> EliminarPedidoPorIdAsync(int identificador) {
            return base.Channel.EliminarPedidoPorIdAsync(identificador);
        }
        
        public PresentacionEscritorio.wcfPedidos.PedidoEntidades[] DevolverListaPedidosPorCliente(int idCliente) {
            return base.Channel.DevolverListaPedidosPorCliente(idCliente);
        }
        
        public System.Threading.Tasks.Task<PresentacionEscritorio.wcfPedidos.PedidoEntidades[]> DevolverListaPedidosPorClienteAsync(int idCliente) {
            return base.Channel.DevolverListaPedidosPorClienteAsync(idCliente);
        }
        
        public bool ActualizarEstado(int idPedido, string estado) {
            return base.Channel.ActualizarEstado(idPedido, estado);
        }
        
        public System.Threading.Tasks.Task<bool> ActualizarEstadoAsync(int idPedido, string estado) {
            return base.Channel.ActualizarEstadoAsync(idPedido, estado);
        }
        
        public bool EliminarPedidosPorEstado() {
            return base.Channel.EliminarPedidosPorEstado();
        }
        
        public System.Threading.Tasks.Task<bool> EliminarPedidosPorEstadoAsync() {
            return base.Channel.EliminarPedidosPorEstadoAsync();
        }
        
        public bool EliminarPedidosIncompletos() {
            return base.Channel.EliminarPedidosIncompletos();
        }
        
        public System.Threading.Tasks.Task<bool> EliminarPedidosIncompletosAsync() {
            return base.Channel.EliminarPedidosIncompletosAsync();
        }
        
        public bool AsignarRepartidor(int idPedido, string estado, int idRepartidor) {
            return base.Channel.AsignarRepartidor(idPedido, estado, idRepartidor);
        }
        
        public System.Threading.Tasks.Task<bool> AsignarRepartidorAsync(int idPedido, string estado, int idRepartidor) {
            return base.Channel.AsignarRepartidorAsync(idPedido, estado, idRepartidor);
        }
        
        public bool actualizarTotalConseguido(int idPedido, double subtotal) {
            return base.Channel.actualizarTotalConseguido(idPedido, subtotal);
        }
        
        public System.Threading.Tasks.Task<bool> actualizarTotalConseguidoAsync(int idPedido, double subtotal) {
            return base.Channel.actualizarTotalConseguidoAsync(idPedido, subtotal);
        }
        
        public PresentacionEscritorio.wcfPedidos.PedidoEntidades[] DevolverListaPedidosPorEstado(string estado) {
            return base.Channel.DevolverListaPedidosPorEstado(estado);
        }
        
        public System.Threading.Tasks.Task<PresentacionEscritorio.wcfPedidos.PedidoEntidades[]> DevolverListaPedidosPorEstadoAsync(string estado) {
            return base.Channel.DevolverListaPedidosPorEstadoAsync(estado);
        }
    }
}
